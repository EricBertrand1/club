{% extends 'base.html.twig' %} 
{% block title %}Castellum — Configurer un test{% endblock %}

{% block body %}

<style>
  /* Pastille colorée cliquable pour chaque catégorie */
  .cat-chip{
    display:inline-block; padding:.35rem .55rem; border-radius:.5rem;
    font-weight:600; line-height:1.1; text-decoration:none;
  }
  /* 0=noir 100=marron 200=rouge 300=orange 400=jaune 500=vert 600=bleu 700=violet 800=gris 900=blanc */
  .cat-000{ background:#000000; color:#ffffff; }            /* noir */
  .cat-100{ background:#8B4513; color:#ffffff; }            /* marron */
  .cat-200{ background:#b91c1c; color:#ffffff; }            /* rouge */
  .cat-300{ background:#f97316; color:#ffffff; }            /* orange */
  .cat-400{ background:#facc15; color:#111827; }            /* jaune -> texte foncé */
  .cat-500{ background:#22c55e; color:#111827; }            /* vert  -> texte foncé */
  .cat-600{ background:#3b82f6; color:#ffffff; }            /* bleu */
  .cat-700{ background:#8b5cf6; color:#ffffff; }            /* violet */
  .cat-800{ background:#6b7280; color:#ffffff; }            /* gris */
  .cat-900{ background:#ffffff; color:#111827; border:1px solid #e5e7eb; } /* blanc + bordure */

  .cat-count{
    display:inline-block; padding:.1rem .4rem; border-radius:999px;
    background:#f3f4f6; color:#111827; border:1px solid #e5e7eb; font-size:.75rem; font-weight:700;
  }
</style>

<div class="container-fluid py-5">

  {# --- Barre tout en haut, bouton Quitter à droite --- #}
  <div class="d-flex justify-content-end">
    <a class="btn btn-outline-secondary" href="{{ path('app_home') }}">Quitter</a>
  </div>

  {# --- Ligne de titre + action principale --- #}
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="page-title m-0">Castellum</h1>
    <button type="submit" form="castellum-form" class="btn btn-primary">Lancer le test</button>
  </div>


  {# Flashs #}
  {% for msg in app.flashes('success') %}<div class="alert alert-success">{{ msg }}</div>{% endfor %}
  {% for msg in app.flashes('warning') %}<div class="alert alert-warning">{{ msg }}</div>{% endfor %}
  {% for msg in app.flashes('danger') %}<div class="alert alert-danger">{{ msg }}</div>{% endfor %}

  <form id="castellum-form" method="post" action="{{ path('castellum_index') }}">
    {# CSRF pour le lancement du test #}
    <input type="hidden" name="_token_castellum_start" value="{{ csrf_token('castellum_start') }}">

    <div class="row g-3 mb-4">
      <div class="col-sm-4">
        <label class="form-label">Nombre de questions</label>
        <select name="count" class="form-select">
          {% for n in options %}
            <option value="{{ n }}" {% if n == prefsCount %}selected{% endif %}>{{ n }}</option>
          {% endfor %}
        </select>
      </div>
      <div class="col-sm-4">
        <label class="form-label">Niveau</label>
        <select name="level" class="form-select">
          {% for lvl in levels %}
            <option value="{{ lvl }}" {% if lvl == prefsLevel %}selected{% endif %}>{{ lvl|capitalize }}</option>
          {% endfor %}
        </select>
      </div>
    </div>

    <div class="card">
      <div class="card-body p-0">
        <table class="table table-hover m-0 align-middle">
          <thead class="table-light">
            <tr>
              <th>Catégories</th>
            </tr>
          </thead>
          <tbody>
          {% for code, label in labels %}
            <tr>
              <td>
                <div class="d-flex align-items-center gap-3">
                  <input class="form-check-input cat-checkbox" type="checkbox"
                        id="cat-{{ code }}-chk" name="cats[]" value="{{ code }}"
                        {% if code in prefsCats %}checked{% endif %}>

                  <a class="cat-chip cat-{{ code }}"
                    href="{{ path('castellum_category', { code: code }) }}"
                    title="Gérer les sous-catégories de {{ code }}">
                    {{ code }} — {{ label }}
                  </a>

                  {# ✅ total des questions pour ce code #}
                  <span class="cat-count">{{ countsByCode[code]|default(0) }}</span>
                </div>
              </td>
            </tr>
          {% else %}
            <tr><td colspan="2" class="text-muted fst-italic">Aucune catégorie.</td></tr>
          {% endfor %}
          </tbody>
        </table>
      </div>
    </div>
  </form>
</div>

<script>
/** Sauvegarde des préférences (AJAX) — uniquement catégories, niveau, nombre. */
const CASTELLUM_PREFS_URL  = "{{ path('castellum_prefs_save') }}";
const CASTELLUM_PREFS_CSRF = "{{ csrf_token('castellum_prefs') }}";
const USER_LOGGED_IN       = {{ app.user ? 'true' : 'false' }};

function collectPrefs(){
  const cats = Array.from(document.querySelectorAll('.cat-checkbox:checked')).map(el => el.value);
  const countSel = document.querySelector('select[name="count"]');
  const levelSel = document.querySelector('select[name="level"]');
  const count = parseInt(countSel?.value || '20', 10);
  const level = (levelSel?.value || 'base');
  return { cats, subsFlat: [], count, level }; // plus de sous-catégories ici
}

let saveTimer = null;
const toast = (() => {
  const box = document.createElement('div');
  box.id = 'prefs-toast';
  box.className = 'position-fixed bottom-0 end-0 m-3';
  box.style.zIndex = 1080;
  box.innerHTML = `<div id="prefs-toast-inner" class="alert alert-secondary py-1 px-2 small mb-0 d-none"></div>`;
  document.addEventListener('DOMContentLoaded', () => document.body.appendChild(box));
  function show(cls, text){
    const inner = document.getElementById('prefs-toast-inner');
    if (!inner) return;
    inner.className = 'alert py-1 px-2 small mb-0 ' + cls;
    inner.textContent = text;
    inner.classList.remove('d-none');
    setTimeout(() => inner.classList.add('d-none'), 1200);
  }
  return {
    saving: () => show('alert-info', 'Enregistrement…'),
    saved:  () => show('alert-success', 'Préférences enregistrées ✓'),
    auth:   () => show('alert-warning', 'Connectez-vous pour sauvegarder vos préférences.'),
    error:  () => show('alert-danger', 'Erreur lors de l’enregistrement.'),
  };
})();

function triggerSave(){
  if (!USER_LOGGED_IN) { toast.auth(); return; }
  if (saveTimer) clearTimeout(saveTimer);
  saveTimer = setTimeout(savePrefs, 300);
}

async function savePrefs(){
  const { cats, subsFlat, count, level } = collectPrefs();
  try {
    toast.saving();
    const params = new URLSearchParams();
    params.append('_token', CASTELLUM_PREFS_CSRF);
    params.append('count', String(count));
    params.append('level', String(level));
    cats.forEach(c => params.append('cats[]', c));
    subsFlat.forEach(id => params.append('subsFlat[]', String(id))); // ici vide

    const resp = await fetch(CASTELLUM_PREFS_URL, {
      method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', 'X-CSRF-TOKEN': CASTELLUM_PREFS_CSRF},
      body: params
    });

    if (resp.status === 401) { toast.auth(); return; }
    if (!resp.ok) { toast.error(); return; }
    const data = await resp.json();
    if (data.ok) toast.saved(); else toast.error();
  } catch(e){
    console.error(e);
    toast.error();
  }
}

/* Listeners */
document.querySelectorAll('.cat-checkbox').forEach(chk => {
  chk.addEventListener('change', triggerSave);
});
document.querySelector('select[name="count"]')?.addEventListener('change', triggerSave);
document.querySelector('select[name="level"]')?.addEventListener('change', triggerSave);
</script>
{% endblock %}
