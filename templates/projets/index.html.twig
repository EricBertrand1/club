{% extends 'base.html.twig' %}
{% block title %}Projets â€” Gantt{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <style>
    .projets-scope .gantt { display: flex; flex-direction: column; gap: 12px; }
    .projets-scope .gantt-row { display: grid; grid-template-columns: 320px 1fr; align-items: center; gap: 12px; }
    @media (max-width: 992px){ .projets-scope .gantt-row { grid-template-columns: 1fr; } }

    .projets-scope .meta {
      background: #f6f7fb; border: 1px solid #e9edf3; border-radius: .5rem; padding: .75rem .9rem;
    }
    .projets-scope .meta .title a { font-weight: 600; color: #1f2937; text-decoration: none; }
    .projets-scope .meta .sub { color: #6b7280; font-size: .9rem; }
    .projets-scope .meta .actions a, .projets-scope .meta .actions button { font-size: .85rem; }

    .projets-scope .track { display: flex; gap: 6px; width: 100%; min-height: 42px; }

    .projets-scope .bar {
      position: relative; display: flex; align-items: center; justify-content: center;
      padding: 0 .6rem; border-radius: .5rem; color:#fff; font-weight:600; font-size:.9rem;
      overflow: hidden; white-space: nowrap; text-overflow: ellipsis; min-width: 48px;
      cursor: grab; flex-basis: 0; /* important pour remplir toute la largeur */
    }
    .projets-scope .bar:active { cursor: grabbing; }
    .projets-scope .bar::after { content:""; position:absolute; inset:0; border:1px solid rgba(255,255,255,.22); border-radius:.5rem; pointer-events:none; }
    .projets-scope .bar.link { text-decoration: none; color:#fff; }

    /* Palette sobre (couleurs diffÃ©rentes par tÃ¢che, cycliques) */
    .projets-scope .bar.c0{ background:#0d6efd; }  /* primary   */
    .projets-scope .bar.c1{ background:#6f42c1; }  /* purple    */
    .projets-scope .bar.c2{ background:#20c997; }  /* teal      */
    .projets-scope .bar.c3{ background:#fd7e14; }  /* orange    */
    .projets-scope .bar.c4{ background:#198754; }  /* green     */
    .projets-scope .bar.c5{ background:#dc3545; }  /* red       */
    .projets-scope .bar.c6{ background:#0dcaf0; color:#052c65; } /* cyan + texte foncÃ© */
    .projets-scope .bar.c7{ background:#6c757d; }  /* secondary */

    /* Indication discrÃ¨te du statut (en surcouche) */
    .projets-scope .bar.st-done::after     { box-shadow: inset 0 0 0 2px rgba(255,255,255,.35); }
    .projets-scope .bar.st-prog::after     { outline: 2px dashed rgba(255,255,255,.35); outline-offset:-4px; }
    .projets-scope .bar.st-not             { opacity: .95; }

    .projets-scope .card { box-shadow: 0 2px 6px rgba(15,23,42,.06); }
  </style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4 projets-scope">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="h4 m-0">Projets</h1>
    <a class="btn btn-primary" href="{{ path('projets_new') }}">Nouveau projet</a>
  </div>

  {# ---------- MES PROJETS ---------- #}
  <div class="card mb-4"><div class="card-header">Mes projets</div><div class="card-body">
    {% if projectsMine is not empty %}
      <div class="gantt">
        {% for p in projectsMine %}
          <div class="gantt-row" data-project-id="{{ p.id }}">
            <div class="meta">
              <div class="title">
                <a href="{{ path('projets_edit',{id:p.id}) }}">{{ p.name }}</a>
              </div>
              <div class="sub">Auteur&nbsp;: {{ p.author ? p.author.username : 'â€”' }}</div>
              <div class="actions mt-2 d-flex gap-2">
                <a class="btn btn-sm btn-outline-primary" href="{{ path('tasks_new',{id:p.id}) }}">Ajouter tÃ¢che</a>
                <form method="post" action="{{ path('projets_delete',{id:p.id}) }}" onsubmit="return confirm('Supprimer le projet ?');">
                  <input type="hidden" name="_token" value="{{ csrf_token('delete_project_'~p.id) }}">
                  <button class="btn btn-sm btn-outline-danger" type="submit">Supprimer</button>
                </form>
              </div>
            </div>

            {# Palette pour couleurs cycliques #}
            {% set palette = ['c0','c1','c2','c3','c4','c5','c6','c7'] %}

            <div class="track" data-track data-project="{{ p.id }}">
              {% for t in p.tasks %}
                {% set grow = (t.hoursPlanned ?: 1) %}
                {% set statusCls = t.status == 'termine' ? 'st-done' : (t.status == 'en_cours' ? 'st-prog' : 'st-not') %}
                {% set colorCls  = palette[loop.index0 % palette|length] %}
                <a href="{{ path('tasks_edit',{id:t.id}) }}"
                   class="bar link {{ colorCls }} {{ statusCls }}"
                   draggable="true"
                   data-task-id="{{ t.id }}"
                   style="flex: {{ grow }} 1 0;">
                  {{ t.name }}
                </a>
              {% endfor %}
              {# ðŸ”¥ plus de barre .add-task ici #}
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <div class="text-muted">Aucune tÃ¢che ne vous est assignÃ©e pour le moment.</div>
    {% endif %}
  </div></div>

  {# ---------- AUTRES PROJETS ---------- #}
  <div class="card"><div class="card-header">Autres projets</div><div class="card-body">
    {% if projectsOthers is not empty %}
      <div class="gantt">
        {% for p in projectsOthers %}
          <div class="gantt-row" data-project-id="{{ p.id }}">
            <div class="meta">
              <div class="title">
                <a href="{{ path('projets_edit',{id:p.id}) }}">{{ p.name }}</a>
              </div>
              <div class="sub">Auteur&nbsp;: {{ p.author ? p.author.username : 'â€”' }}</div>
              <div class="actions mt-2 d-flex gap-2">
                <a class="btn btn-sm btn-outline-primary" href="{{ path('tasks_new',{id:p.id}) }}">Ajouter tÃ¢che</a>
                <form method="post" action="{{ path('projets_delete',{id:p.id}) }}" onsubmit="return confirm('Supprimer le projet ?');">
                  <input type="hidden" name="_token" value="{{ csrf_token('delete_project_'~p.id) }}">
                  <button class="btn btn-sm btn-outline-danger" type="submit">Supprimer</button>
                </form>
              </div>
            </div>

            {% set palette = ['c0','c1','c2','c3','c4','c5','c6','c7'] %}

            <div class="track" data-track data-project="{{ p.id }}">
              {% for t in p.tasks %}
                {% set grow = (t.hoursPlanned ?: 1) %}
                {% set statusCls = t.status == 'termine' ? 'st-done' : (t.status == 'en_cours' ? 'st-prog' : 'st-not') %}
                {% set colorCls  = palette[loop.index0 % palette|length] %}
                <a href="{{ path('tasks_edit',{id:t.id}) }}"
                   class="bar link {{ colorCls }} {{ statusCls }}"
                   draggable="true"
                   data-task-id="{{ t.id }}"
                   style="flex: {{ grow }} 1 0;">
                  {{ t.name }}
                </a>
              {% endfor %}
              {# ðŸ”¥ plus de barre .add-task ici non plus #}
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <div class="text-muted">â€”</div>
    {% endif %}
  </div></div>
</div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>
    // Drag & Drop simple par ligne (rÃ©ordonne les .bar.link uniquement)
    document.addEventListener('DOMContentLoaded', function () {
      document.querySelectorAll('[data-track]').forEach(function(track){
        let dragEl = null;

        track.addEventListener('dragstart', function(e){
          const link = e.target.closest('.bar.link');
          if (!link) return;
          dragEl = link;
          e.dataTransfer.effectAllowed = 'move';
          setTimeout(()=>link.classList.add('opacity-50'),0);
        });

        track.addEventListener('dragover', function(e){
          e.preventDefault();
          const after = getAfterElement(track, e.clientX);
          if (!dragEl) return;
          if (after == null) track.appendChild(dragEl);
          else track.insertBefore(dragEl, after);
        });

        track.addEventListener('drop', function(){
          if (!dragEl) return;
          dragEl.classList.remove('opacity-50');
          dragEl = null;
          persistOrder(track);
        });

        track.addEventListener('dragend', function(){
          if (dragEl) dragEl.classList.remove('opacity-50');
          dragEl = null;
        });
      });

      function getAfterElement(container, x){
        const els = [...container.querySelectorAll('.bar.link')];
        let closest = null;
        let closestOffset = Number.NEGATIVE_INFINITY;
        els.forEach(el => {
          const box = el.getBoundingClientRect();
          const offset = x - box.left - box.width/2;
          if (offset < 0 && offset > closestOffset) {
            closestOffset = offset;
            closest = el;
          }
        });
        return closest;
      }

      function persistOrder(track){
        const projectId = track.getAttribute('data-project');
        const order = [...track.querySelectorAll('.bar.link')].map(el => el.dataset.taskId);
        fetch('{{ path('tasks_reorder') }}', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({projectId: projectId, order: order})
        }).catch(()=>{});
      }
    });
  </script>
{% endblock %}
